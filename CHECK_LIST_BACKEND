ЧЕК-ЛИСТ ДЛЯ ТЕСТИРОВАНИЯ BACKEND API
========================================
Общие проверки для всех методов:
[ ] Код статуса HTTP корректен и соответствует спецификации
[ ] Заголовки ответа корректны (Content-Type, CORS-заголовки и т.д.)
[ ] Тело ответа соответствует ожидаемой схеме (JSON, XML)
[ ] Валидация ошибок работает и возвращает понятные сообщения
[ ] Проверка авторизации/аутентификации (если endpoint защищен)
[ ] Время ответа адекватное (перформанс)
[ ] Логирование запросов и ошибок (проверить логи сервера)

========================================
МЕТОД: GET (Получение ресурсов)
----------------------------------------
Общие проверки для GET:
[ ] Запрос без параметров возвращает ожидаемые данные
[ ] Запрос с корректными параметрами возвращает данные
[ ] Запрос с некорректными параметрами обрабатывается с ошибкой

Сценарии для полей userID и requestID:

1. GET /api/users/{userID}
   [ ] Запрос с существующим userID -> 200 OK, возвращает данные пользователя
   [ ] Запрос с несуществующим userID -> 404 Not Found
   [ ] Запрос с невалидным userID (не число, отрицательное) -> 400 Bad Request
   [ ] Запрос без прав доступа к данному userID -> 403 Forbidden

2. GET /api/requests/{requestID}
   [ ] Запрос с существующим requestID -> 200 OK, возвращает данные запроса
   [ ] Запрос с несуществующим requestID -> 404 Not Found
   [ ] Запрос с невалидным requestID -> 400 Bad Request
   [ ] Запрос к requestID другого пользователя -> 403 Forbidden (если применимо)

3. GET /api/users/{userID}/requests
   [ ] Запрос с существующим userID -> 200 OK, возвращает список запросов
   [ ] Запрос возвращает корректное количество запросов (пагинация, если есть)
   [ ] Запрос с несуществующим userID -> 404 Not Found
   [ ] Запрос с невалидным userID -> 400 Bad Request

4. GET с query-параметрами (фильтрация, поиск, пагинация)
   [ ] /api/requests?userID={userID} -> возвращает запросы только этого пользователя
   [ ] /api/requests?status=approved -> возвращает запросы только с указанным статусом
   [ ] Пагинация (limit, offset) работает корректно

========================================
МЕТОД: POST (Создание ресурса)
----------------------------------------
Общие проверки для POST:
[ ] Создание ресурса с полным набором валидных данных -> 201 Created
[ ] В ответе возвращается ID созданного ресурса (и Location header, если есть)
[ ] Создание ресурса с неполными данными -> 400 Bad Request
[ ] Создание ресурса с невалидными данными -> 400 Bad Request
[ ] Проверка на дубликаты (если применимо) -> 409 Conflict

Сценарии для полей userID и requestID:

1. POST /api/requests (создание нового запроса)
   [ ] Успешное создание с валидным userID в теле -> 201 Created
   [ ] Попытка создания с несуществующим userID -> 400/404/422 (в зависимости от логики)
   [ ] Попытка создания с невалидным userID -> 400 Bad Request
   [ ] В ответе возвращается сгенерированный requestID

2. POST /api/users (создание пользователя)
   [ ] Успешное создание пользователя -> 201 Created
   [ ] Попытка создания с существующим логином/email -> 409 Conflict

========================================
МЕТОД: PATCH (Частичное обновление ресурса)
----------------------------------------
Общие проверки для PATCH:
[ ] Частичное обновление с валидными данными -> 200 OK
[ ] Обновление несуществующего ресурса -> 404 Not Found
[ ] Обновление с невалидными данными -> 400 Bad Request
[ ] Обновление с некорректным типом данных -> 400 Bad Request

Сценарии для полей userID и requestID:

1. PATCH /api/users/{userID}
   [ ] Обновление email/имени существующего пользователя -> 200 OK
   [ ] Обновление несуществующего userID -> 404 Not Found
   [ ] Попытка обновить userID на другой (если поле обновляемо) -> 400 Bad Request (ID обычно immutable)

2. PATCH /api/requests/{requestID}
   [ ] Обновление статуса запроса -> 200 OK
   [ ] Обновление несуществующего requestID -> 404 Not Found
   [ ] Попытка обновить requestID -> 400 Bad Request
   [ ] Попытка обновить запрос другого пользователя -> 403 Forbidden

========================================
МЕТОД: PUT (Полная замена ресурса)
----------------------------------------
Общие проверки для PUT:
[ ] Полное обновление существующего ресурса -> 200 OK
[ ] Полное обновление несуществующего ресурса (если поддерживается upsert) -> 201 Created
[ ] Обновление с неполным телом запроса -> 400 Bad Request (если ID в теле должен совпадать с ID в URL)

Сценарии для полей userID и requestID:
[ ] PUT /api/users/{userID} с полным телом -> 200 OK
[ ] PUT /api/requests/{requestID} с полным телом -> 200 OK
[ ] Несоответствие userID/requestID в URL и в теле запроса -> 400 Bad Request

========================================
МЕТОД: DELETE (Удаление ресурса)
----------------------------------------
Общие проверки для DELETE:
[ ] Удаление существующего ресурса -> 200 OK или 204 No Content
[ ] Повторное удаление того же ресурса -> 404 Not Found
[ ] Удаление несуществующего ресурса -> 404 Not Found

Сценарии для полей userID и requestID:

1. DELETE /api/users/{userID}
   [ ] Удаление существующего userID -> 200 OK / 204 No Content
   [ ] Удаление несуществующего userID -> 404 Not Found
   [ ] Каскадное удаление (все связанные запросы тоже удаляются/обрабатываются)

2. DELETE /api/requests/{requestID}
   [ ] Удаление существующего requestID -> 200 OK / 204 No Content
   [ ] Удаление несуществующего requestID -> 404 Not Found
   [ ] Попытка удалить запрос другого пользователя -> 403 Forbidden

========================================
МЕТОД: HEAD (Получение заголовков)
----------------------------------------
[ ] HEAD /api/users/{userID} -> возвращает те же заголовки, что и GET, но без тела
[ ] HEAD /api/requests/{requestID} -> возвращает заголовки

========================================
МЕТОД: OPTIONS (Информация о поддерживаемых методах)
----------------------------------------
[ ] OPTIONS /api/users -> возвращает заголовок Allow со списком методов (GET, POST, etc.)
[ ] OPTIONS /api/users/{userID} -> возвращает заголовок Allow со списком методов (GET, PATCH, DELETE)

========================================